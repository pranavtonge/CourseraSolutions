{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "lbFmQdsZs5eW"
   },
   "outputs": [],
   "source": [
    "# ATTENTION: Please do not alter any of the provided code in the exercise. Only add your own code where indicated\n",
    "# ATTENTION: Please do not add or remove any cells in the exercise. The grader will check specific cells based on the cell position.\n",
    "# ATTENTION: Please use the provided epoch values when training.\n",
    "\n",
    "# Import all the necessary files!\n",
    "import os\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras import layers\n",
    "from tensorflow.keras import Model\n",
    "from os import getcwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "1xJZ5glPPCRz"
   },
   "outputs": [],
   "source": [
    "path_inception = f\"{getcwd()}/../tmp2/inception_v3_weights_tf_dim_ordering_tf_kernels_notop.h5\"\n",
    "\n",
    "from tensorflow.keras.applications.inception_v3 import InceptionV3\n",
    "\n",
    "# Create an instance of the inception model from the local pre-trained weights\n",
    "local_weights_file = path_inception\n",
    "\n",
    "pre_trained_model = InceptionV3(input_shape = (150, 150, 3), \n",
    "                                include_top = False, # Remove dense layer before CONV layers\n",
    "                                weights = None) # Don't use default weights\n",
    "\n",
    "pre_trained_model.load_weights(local_weights_file)\n",
    "\n",
    "# Make all the layers in the pre-trained model non-trainable\n",
    "for layer in pre_trained_model.layers:\n",
    "  layer.trainable = False\n",
    "\n",
    "# Expected Output is extremely large, but should end with:\n",
    "\n",
    "#batch_normalization_v1_281 (Bat (None, 3, 3, 192)    576         conv2d_281[0][0]                 \n",
    "#__________________________________________________________________________________________________\n",
    "#activation_273 (Activation)     (None, 3, 3, 320)    0           batch_normalization_v1_273[0][0] \n",
    "#__________________________________________________________________________________________________\n",
    "#mixed9_1 (Concatenate)          (None, 3, 3, 768)    0           activation_275[0][0]             \n",
    "#                                                                 activation_276[0][0]             \n",
    "#__________________________________________________________________________________________________\n",
    "#concatenate_5 (Concatenate)     (None, 3, 3, 768)    0           activation_279[0][0]             \n",
    "#                                                                 activation_280[0][0]             \n",
    "#__________________________________________________________________________________________________\n",
    "#activation_281 (Activation)     (None, 3, 3, 192)    0           batch_normalization_v1_281[0][0] \n",
    "#__________________________________________________________________________________________________\n",
    "#mixed10 (Concatenate)           (None, 3, 3, 2048)   0           activation_273[0][0]             \n",
    "#                                                                 mixed9_1[0][0]                   \n",
    "#                                                                 concatenate_5[0][0]              \n",
    "#                                                                 activation_281[0][0]             \n",
    "#==================================================================================================\n",
    "#Total params: 21,802,784\n",
    "#Trainable params: 0\n",
    "#Non-trainable params: 21,802,784"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "CFsUlwdfs_wg"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "last layer output shape:  (None, 7, 7, 768)\n"
     ]
    }
   ],
   "source": [
    "last_layer = pre_trained_model.get_layer('mixed7')\n",
    "print('last layer output shape: ', last_layer.output_shape)\n",
    "last_output = last_layer.output\n",
    "\n",
    "# Expected Output:\n",
    "# ('last layer output shape: ', (None, 7, 7, 768))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "-bsWZWp5oMq9"
   },
   "outputs": [],
   "source": [
    "# Define a Callback class that stops training once accuracy reaches 97.0%\n",
    "class myCallback(tf.keras.callbacks.Callback):\n",
    "  def on_epoch_end(self, epoch, logs={}):\n",
    "    if(logs.get('accuracy')>0.97):\n",
    "      print(\"\\nReached 97.0% accuracy so cancelling training!\")\n",
    "      self.model.stop_training = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "BMXb913pbvFg"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input_2 (InputLayer)            [(None, 150, 150, 3) 0                                            \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_94 (Conv2D)              (None, 74, 74, 32)   864         input_2[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_94 (BatchNo (None, 74, 74, 32)   96          conv2d_94[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "activation_94 (Activation)      (None, 74, 74, 32)   0           batch_normalization_94[0][0]     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_95 (Conv2D)              (None, 72, 72, 32)   9216        activation_94[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_95 (BatchNo (None, 72, 72, 32)   96          conv2d_95[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "activation_95 (Activation)      (None, 72, 72, 32)   0           batch_normalization_95[0][0]     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_96 (Conv2D)              (None, 72, 72, 64)   18432       activation_95[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_96 (BatchNo (None, 72, 72, 64)   192         conv2d_96[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "activation_96 (Activation)      (None, 72, 72, 64)   0           batch_normalization_96[0][0]     \n",
      "__________________________________________________________________________________________________\n",
      "max_pooling2d_4 (MaxPooling2D)  (None, 35, 35, 64)   0           activation_96[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_97 (Conv2D)              (None, 35, 35, 80)   5120        max_pooling2d_4[0][0]            \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_97 (BatchNo (None, 35, 35, 80)   240         conv2d_97[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "activation_97 (Activation)      (None, 35, 35, 80)   0           batch_normalization_97[0][0]     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_98 (Conv2D)              (None, 33, 33, 192)  138240      activation_97[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_98 (BatchNo (None, 33, 33, 192)  576         conv2d_98[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "activation_98 (Activation)      (None, 33, 33, 192)  0           batch_normalization_98[0][0]     \n",
      "__________________________________________________________________________________________________\n",
      "max_pooling2d_5 (MaxPooling2D)  (None, 16, 16, 192)  0           activation_98[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_102 (Conv2D)             (None, 16, 16, 64)   12288       max_pooling2d_5[0][0]            \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_102 (BatchN (None, 16, 16, 64)   192         conv2d_102[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_102 (Activation)     (None, 16, 16, 64)   0           batch_normalization_102[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_100 (Conv2D)             (None, 16, 16, 48)   9216        max_pooling2d_5[0][0]            \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_103 (Conv2D)             (None, 16, 16, 96)   55296       activation_102[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_100 (BatchN (None, 16, 16, 48)   144         conv2d_100[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_103 (BatchN (None, 16, 16, 96)   288         conv2d_103[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_100 (Activation)     (None, 16, 16, 48)   0           batch_normalization_100[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_103 (Activation)     (None, 16, 16, 96)   0           batch_normalization_103[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "average_pooling2d_9 (AveragePoo (None, 16, 16, 192)  0           max_pooling2d_5[0][0]            \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_99 (Conv2D)              (None, 16, 16, 64)   12288       max_pooling2d_5[0][0]            \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_101 (Conv2D)             (None, 16, 16, 64)   76800       activation_100[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_104 (Conv2D)             (None, 16, 16, 96)   82944       activation_103[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_105 (Conv2D)             (None, 16, 16, 32)   6144        average_pooling2d_9[0][0]        \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_99 (BatchNo (None, 16, 16, 64)   192         conv2d_99[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_101 (BatchN (None, 16, 16, 64)   192         conv2d_101[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_104 (BatchN (None, 16, 16, 96)   288         conv2d_104[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_105 (BatchN (None, 16, 16, 32)   96          conv2d_105[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_99 (Activation)      (None, 16, 16, 64)   0           batch_normalization_99[0][0]     \n",
      "__________________________________________________________________________________________________\n",
      "activation_101 (Activation)     (None, 16, 16, 64)   0           batch_normalization_101[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_104 (Activation)     (None, 16, 16, 96)   0           batch_normalization_104[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_105 (Activation)     (None, 16, 16, 32)   0           batch_normalization_105[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "mixed0 (Concatenate)            (None, 16, 16, 256)  0           activation_99[0][0]              \n",
      "                                                                 activation_101[0][0]             \n",
      "                                                                 activation_104[0][0]             \n",
      "                                                                 activation_105[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_109 (Conv2D)             (None, 16, 16, 64)   16384       mixed0[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_109 (BatchN (None, 16, 16, 64)   192         conv2d_109[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_109 (Activation)     (None, 16, 16, 64)   0           batch_normalization_109[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_107 (Conv2D)             (None, 16, 16, 48)   12288       mixed0[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_110 (Conv2D)             (None, 16, 16, 96)   55296       activation_109[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_107 (BatchN (None, 16, 16, 48)   144         conv2d_107[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_110 (BatchN (None, 16, 16, 96)   288         conv2d_110[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_107 (Activation)     (None, 16, 16, 48)   0           batch_normalization_107[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_110 (Activation)     (None, 16, 16, 96)   0           batch_normalization_110[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "average_pooling2d_10 (AveragePo (None, 16, 16, 256)  0           mixed0[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_106 (Conv2D)             (None, 16, 16, 64)   16384       mixed0[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_108 (Conv2D)             (None, 16, 16, 64)   76800       activation_107[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_111 (Conv2D)             (None, 16, 16, 96)   82944       activation_110[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_112 (Conv2D)             (None, 16, 16, 64)   16384       average_pooling2d_10[0][0]       \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_106 (BatchN (None, 16, 16, 64)   192         conv2d_106[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_108 (BatchN (None, 16, 16, 64)   192         conv2d_108[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_111 (BatchN (None, 16, 16, 96)   288         conv2d_111[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_112 (BatchN (None, 16, 16, 64)   192         conv2d_112[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_106 (Activation)     (None, 16, 16, 64)   0           batch_normalization_106[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_108 (Activation)     (None, 16, 16, 64)   0           batch_normalization_108[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_111 (Activation)     (None, 16, 16, 96)   0           batch_normalization_111[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_112 (Activation)     (None, 16, 16, 64)   0           batch_normalization_112[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "mixed1 (Concatenate)            (None, 16, 16, 288)  0           activation_106[0][0]             \n",
      "                                                                 activation_108[0][0]             \n",
      "                                                                 activation_111[0][0]             \n",
      "                                                                 activation_112[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_116 (Conv2D)             (None, 16, 16, 64)   18432       mixed1[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_116 (BatchN (None, 16, 16, 64)   192         conv2d_116[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_116 (Activation)     (None, 16, 16, 64)   0           batch_normalization_116[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_114 (Conv2D)             (None, 16, 16, 48)   13824       mixed1[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_117 (Conv2D)             (None, 16, 16, 96)   55296       activation_116[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_114 (BatchN (None, 16, 16, 48)   144         conv2d_114[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_117 (BatchN (None, 16, 16, 96)   288         conv2d_117[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_114 (Activation)     (None, 16, 16, 48)   0           batch_normalization_114[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_117 (Activation)     (None, 16, 16, 96)   0           batch_normalization_117[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "average_pooling2d_11 (AveragePo (None, 16, 16, 288)  0           mixed1[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_113 (Conv2D)             (None, 16, 16, 64)   18432       mixed1[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_115 (Conv2D)             (None, 16, 16, 64)   76800       activation_114[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_118 (Conv2D)             (None, 16, 16, 96)   82944       activation_117[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_119 (Conv2D)             (None, 16, 16, 64)   18432       average_pooling2d_11[0][0]       \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_113 (BatchN (None, 16, 16, 64)   192         conv2d_113[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_115 (BatchN (None, 16, 16, 64)   192         conv2d_115[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_118 (BatchN (None, 16, 16, 96)   288         conv2d_118[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_119 (BatchN (None, 16, 16, 64)   192         conv2d_119[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_113 (Activation)     (None, 16, 16, 64)   0           batch_normalization_113[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_115 (Activation)     (None, 16, 16, 64)   0           batch_normalization_115[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_118 (Activation)     (None, 16, 16, 96)   0           batch_normalization_118[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_119 (Activation)     (None, 16, 16, 64)   0           batch_normalization_119[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "mixed2 (Concatenate)            (None, 16, 16, 288)  0           activation_113[0][0]             \n",
      "                                                                 activation_115[0][0]             \n",
      "                                                                 activation_118[0][0]             \n",
      "                                                                 activation_119[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_121 (Conv2D)             (None, 16, 16, 64)   18432       mixed2[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_121 (BatchN (None, 16, 16, 64)   192         conv2d_121[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_121 (Activation)     (None, 16, 16, 64)   0           batch_normalization_121[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_122 (Conv2D)             (None, 16, 16, 96)   55296       activation_121[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_122 (BatchN (None, 16, 16, 96)   288         conv2d_122[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_122 (Activation)     (None, 16, 16, 96)   0           batch_normalization_122[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_120 (Conv2D)             (None, 7, 7, 384)    995328      mixed2[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_123 (Conv2D)             (None, 7, 7, 96)     82944       activation_122[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_120 (BatchN (None, 7, 7, 384)    1152        conv2d_120[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_123 (BatchN (None, 7, 7, 96)     288         conv2d_123[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_120 (Activation)     (None, 7, 7, 384)    0           batch_normalization_120[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_123 (Activation)     (None, 7, 7, 96)     0           batch_normalization_123[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "max_pooling2d_6 (MaxPooling2D)  (None, 7, 7, 288)    0           mixed2[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "mixed3 (Concatenate)            (None, 7, 7, 768)    0           activation_120[0][0]             \n",
      "                                                                 activation_123[0][0]             \n",
      "                                                                 max_pooling2d_6[0][0]            \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_128 (Conv2D)             (None, 7, 7, 128)    98304       mixed3[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_128 (BatchN (None, 7, 7, 128)    384         conv2d_128[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_128 (Activation)     (None, 7, 7, 128)    0           batch_normalization_128[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_129 (Conv2D)             (None, 7, 7, 128)    114688      activation_128[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_129 (BatchN (None, 7, 7, 128)    384         conv2d_129[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_129 (Activation)     (None, 7, 7, 128)    0           batch_normalization_129[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_125 (Conv2D)             (None, 7, 7, 128)    98304       mixed3[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_130 (Conv2D)             (None, 7, 7, 128)    114688      activation_129[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_125 (BatchN (None, 7, 7, 128)    384         conv2d_125[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_130 (BatchN (None, 7, 7, 128)    384         conv2d_130[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_125 (Activation)     (None, 7, 7, 128)    0           batch_normalization_125[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_130 (Activation)     (None, 7, 7, 128)    0           batch_normalization_130[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_126 (Conv2D)             (None, 7, 7, 128)    114688      activation_125[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_131 (Conv2D)             (None, 7, 7, 128)    114688      activation_130[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_126 (BatchN (None, 7, 7, 128)    384         conv2d_126[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_131 (BatchN (None, 7, 7, 128)    384         conv2d_131[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_126 (Activation)     (None, 7, 7, 128)    0           batch_normalization_126[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_131 (Activation)     (None, 7, 7, 128)    0           batch_normalization_131[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "average_pooling2d_12 (AveragePo (None, 7, 7, 768)    0           mixed3[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_124 (Conv2D)             (None, 7, 7, 192)    147456      mixed3[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_127 (Conv2D)             (None, 7, 7, 192)    172032      activation_126[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_132 (Conv2D)             (None, 7, 7, 192)    172032      activation_131[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_133 (Conv2D)             (None, 7, 7, 192)    147456      average_pooling2d_12[0][0]       \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_124 (BatchN (None, 7, 7, 192)    576         conv2d_124[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_127 (BatchN (None, 7, 7, 192)    576         conv2d_127[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_132 (BatchN (None, 7, 7, 192)    576         conv2d_132[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_133 (BatchN (None, 7, 7, 192)    576         conv2d_133[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_124 (Activation)     (None, 7, 7, 192)    0           batch_normalization_124[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_127 (Activation)     (None, 7, 7, 192)    0           batch_normalization_127[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_132 (Activation)     (None, 7, 7, 192)    0           batch_normalization_132[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_133 (Activation)     (None, 7, 7, 192)    0           batch_normalization_133[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "mixed4 (Concatenate)            (None, 7, 7, 768)    0           activation_124[0][0]             \n",
      "                                                                 activation_127[0][0]             \n",
      "                                                                 activation_132[0][0]             \n",
      "                                                                 activation_133[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_138 (Conv2D)             (None, 7, 7, 160)    122880      mixed4[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_138 (BatchN (None, 7, 7, 160)    480         conv2d_138[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_138 (Activation)     (None, 7, 7, 160)    0           batch_normalization_138[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_139 (Conv2D)             (None, 7, 7, 160)    179200      activation_138[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_139 (BatchN (None, 7, 7, 160)    480         conv2d_139[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_139 (Activation)     (None, 7, 7, 160)    0           batch_normalization_139[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_135 (Conv2D)             (None, 7, 7, 160)    122880      mixed4[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_140 (Conv2D)             (None, 7, 7, 160)    179200      activation_139[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_135 (BatchN (None, 7, 7, 160)    480         conv2d_135[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_140 (BatchN (None, 7, 7, 160)    480         conv2d_140[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_135 (Activation)     (None, 7, 7, 160)    0           batch_normalization_135[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_140 (Activation)     (None, 7, 7, 160)    0           batch_normalization_140[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_136 (Conv2D)             (None, 7, 7, 160)    179200      activation_135[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_141 (Conv2D)             (None, 7, 7, 160)    179200      activation_140[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_136 (BatchN (None, 7, 7, 160)    480         conv2d_136[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_141 (BatchN (None, 7, 7, 160)    480         conv2d_141[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_136 (Activation)     (None, 7, 7, 160)    0           batch_normalization_136[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_141 (Activation)     (None, 7, 7, 160)    0           batch_normalization_141[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "average_pooling2d_13 (AveragePo (None, 7, 7, 768)    0           mixed4[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_134 (Conv2D)             (None, 7, 7, 192)    147456      mixed4[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_137 (Conv2D)             (None, 7, 7, 192)    215040      activation_136[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_142 (Conv2D)             (None, 7, 7, 192)    215040      activation_141[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_143 (Conv2D)             (None, 7, 7, 192)    147456      average_pooling2d_13[0][0]       \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_134 (BatchN (None, 7, 7, 192)    576         conv2d_134[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_137 (BatchN (None, 7, 7, 192)    576         conv2d_137[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_142 (BatchN (None, 7, 7, 192)    576         conv2d_142[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_143 (BatchN (None, 7, 7, 192)    576         conv2d_143[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_134 (Activation)     (None, 7, 7, 192)    0           batch_normalization_134[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_137 (Activation)     (None, 7, 7, 192)    0           batch_normalization_137[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_142 (Activation)     (None, 7, 7, 192)    0           batch_normalization_142[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_143 (Activation)     (None, 7, 7, 192)    0           batch_normalization_143[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "mixed5 (Concatenate)            (None, 7, 7, 768)    0           activation_134[0][0]             \n",
      "                                                                 activation_137[0][0]             \n",
      "                                                                 activation_142[0][0]             \n",
      "                                                                 activation_143[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_148 (Conv2D)             (None, 7, 7, 160)    122880      mixed5[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_148 (BatchN (None, 7, 7, 160)    480         conv2d_148[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_148 (Activation)     (None, 7, 7, 160)    0           batch_normalization_148[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_149 (Conv2D)             (None, 7, 7, 160)    179200      activation_148[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_149 (BatchN (None, 7, 7, 160)    480         conv2d_149[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_149 (Activation)     (None, 7, 7, 160)    0           batch_normalization_149[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_145 (Conv2D)             (None, 7, 7, 160)    122880      mixed5[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_150 (Conv2D)             (None, 7, 7, 160)    179200      activation_149[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_145 (BatchN (None, 7, 7, 160)    480         conv2d_145[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_150 (BatchN (None, 7, 7, 160)    480         conv2d_150[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_145 (Activation)     (None, 7, 7, 160)    0           batch_normalization_145[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_150 (Activation)     (None, 7, 7, 160)    0           batch_normalization_150[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_146 (Conv2D)             (None, 7, 7, 160)    179200      activation_145[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_151 (Conv2D)             (None, 7, 7, 160)    179200      activation_150[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_146 (BatchN (None, 7, 7, 160)    480         conv2d_146[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_151 (BatchN (None, 7, 7, 160)    480         conv2d_151[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_146 (Activation)     (None, 7, 7, 160)    0           batch_normalization_146[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_151 (Activation)     (None, 7, 7, 160)    0           batch_normalization_151[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "average_pooling2d_14 (AveragePo (None, 7, 7, 768)    0           mixed5[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_144 (Conv2D)             (None, 7, 7, 192)    147456      mixed5[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_147 (Conv2D)             (None, 7, 7, 192)    215040      activation_146[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_152 (Conv2D)             (None, 7, 7, 192)    215040      activation_151[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_153 (Conv2D)             (None, 7, 7, 192)    147456      average_pooling2d_14[0][0]       \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_144 (BatchN (None, 7, 7, 192)    576         conv2d_144[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_147 (BatchN (None, 7, 7, 192)    576         conv2d_147[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_152 (BatchN (None, 7, 7, 192)    576         conv2d_152[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_153 (BatchN (None, 7, 7, 192)    576         conv2d_153[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_144 (Activation)     (None, 7, 7, 192)    0           batch_normalization_144[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_147 (Activation)     (None, 7, 7, 192)    0           batch_normalization_147[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_152 (Activation)     (None, 7, 7, 192)    0           batch_normalization_152[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_153 (Activation)     (None, 7, 7, 192)    0           batch_normalization_153[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "mixed6 (Concatenate)            (None, 7, 7, 768)    0           activation_144[0][0]             \n",
      "                                                                 activation_147[0][0]             \n",
      "                                                                 activation_152[0][0]             \n",
      "                                                                 activation_153[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_158 (Conv2D)             (None, 7, 7, 192)    147456      mixed6[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_158 (BatchN (None, 7, 7, 192)    576         conv2d_158[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_158 (Activation)     (None, 7, 7, 192)    0           batch_normalization_158[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_159 (Conv2D)             (None, 7, 7, 192)    258048      activation_158[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_159 (BatchN (None, 7, 7, 192)    576         conv2d_159[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_159 (Activation)     (None, 7, 7, 192)    0           batch_normalization_159[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_155 (Conv2D)             (None, 7, 7, 192)    147456      mixed6[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_160 (Conv2D)             (None, 7, 7, 192)    258048      activation_159[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_155 (BatchN (None, 7, 7, 192)    576         conv2d_155[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_160 (BatchN (None, 7, 7, 192)    576         conv2d_160[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_155 (Activation)     (None, 7, 7, 192)    0           batch_normalization_155[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_160 (Activation)     (None, 7, 7, 192)    0           batch_normalization_160[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_156 (Conv2D)             (None, 7, 7, 192)    258048      activation_155[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_161 (Conv2D)             (None, 7, 7, 192)    258048      activation_160[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_156 (BatchN (None, 7, 7, 192)    576         conv2d_156[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_161 (BatchN (None, 7, 7, 192)    576         conv2d_161[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_156 (Activation)     (None, 7, 7, 192)    0           batch_normalization_156[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_161 (Activation)     (None, 7, 7, 192)    0           batch_normalization_161[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "average_pooling2d_15 (AveragePo (None, 7, 7, 768)    0           mixed6[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_154 (Conv2D)             (None, 7, 7, 192)    147456      mixed6[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_157 (Conv2D)             (None, 7, 7, 192)    258048      activation_156[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_162 (Conv2D)             (None, 7, 7, 192)    258048      activation_161[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "conv2d_163 (Conv2D)             (None, 7, 7, 192)    147456      average_pooling2d_15[0][0]       \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_154 (BatchN (None, 7, 7, 192)    576         conv2d_154[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_157 (BatchN (None, 7, 7, 192)    576         conv2d_157[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_162 (BatchN (None, 7, 7, 192)    576         conv2d_162[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "batch_normalization_163 (BatchN (None, 7, 7, 192)    576         conv2d_163[0][0]                 \n",
      "__________________________________________________________________________________________________\n",
      "activation_154 (Activation)     (None, 7, 7, 192)    0           batch_normalization_154[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_157 (Activation)     (None, 7, 7, 192)    0           batch_normalization_157[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_162 (Activation)     (None, 7, 7, 192)    0           batch_normalization_162[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "activation_163 (Activation)     (None, 7, 7, 192)    0           batch_normalization_163[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "mixed7 (Concatenate)            (None, 7, 7, 768)    0           activation_154[0][0]             \n",
      "                                                                 activation_157[0][0]             \n",
      "                                                                 activation_162[0][0]             \n",
      "                                                                 activation_163[0][0]             \n",
      "__________________________________________________________________________________________________\n",
      "flatten_1 (Flatten)             (None, 37632)        0           mixed7[0][0]                     \n",
      "__________________________________________________________________________________________________\n",
      "dense_2 (Dense)                 (None, 1024)         38536192    flatten_1[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "dropout_1 (Dropout)             (None, 1024)         0           dense_2[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "dense_3 (Dense)                 (None, 1)            1025        dropout_1[0][0]                  \n",
      "==================================================================================================\n",
      "Total params: 47,512,481\n",
      "Trainable params: 38,537,217\n",
      "Non-trainable params: 8,975,264\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.optimizers import RMSprop\n",
    "\n",
    "# Flatten the output layer to 1 dimension\n",
    "x = layers.Flatten()(last_output)\n",
    "# Add a fully connected layer with 1,024 hidden units and ReLU activation\n",
    "x = layers.Dense(1024, activation='relu')(x)\n",
    "# Add a dropout rate of 0.2\n",
    "x = layers.Dropout(0.2)(x)                  \n",
    "# Add a final sigmoid layer for classification\n",
    "x = layers.Dense  (1, activation='sigmoid')(x)           \n",
    "\n",
    "model = Model( pre_trained_model.input, x) \n",
    "\n",
    "model.compile(optimizer = RMSprop(lr=0.0001), \n",
    "              loss = 'binary_crossentropy', \n",
    "              metrics = ['accuracy'])\n",
    "\n",
    "model.summary()\n",
    "\n",
    "# Expected output will be large. Last few lines should be:\n",
    "\n",
    "# mixed7 (Concatenate)            (None, 7, 7, 768)    0           activation_248[0][0]             \n",
    "#                                                                  activation_251[0][0]             \n",
    "#                                                                  activation_256[0][0]             \n",
    "#                                                                  activation_257[0][0]             \n",
    "# __________________________________________________________________________________________________\n",
    "# flatten_4 (Flatten)             (None, 37632)        0           mixed7[0][0]                     \n",
    "# __________________________________________________________________________________________________\n",
    "# dense_8 (Dense)                 (None, 1024)         38536192    flatten_4[0][0]                  \n",
    "# __________________________________________________________________________________________________\n",
    "# dropout_4 (Dropout)             (None, 1024)         0           dense_8[0][0]                    \n",
    "# __________________________________________________________________________________________________\n",
    "# dense_9 (Dense)                 (None, 1)            1025        dropout_4[0][0]                  \n",
    "# ==================================================================================================\n",
    "# Total params: 47,512,481\n",
    "# Trainable params: 38,537,217\n",
    "# Non-trainable params: 8,975,264"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "HrnL_IQ8knWA"
   },
   "outputs": [],
   "source": [
    "# Get the Horse or Human dataset\n",
    "path_horse_or_human = f\"{getcwd()}/../tmp2/horse-or-human.zip\"\n",
    "# Get the Horse or Human Validation dataset\n",
    "path_validation_horse_or_human = f\"{getcwd()}/../tmp2/validation-horse-or-human.zip\"\n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "\n",
    "import os\n",
    "import zipfile\n",
    "import shutil\n",
    "\n",
    "shutil.rmtree('/tmp')\n",
    "local_zip = path_horse_or_human\n",
    "zip_ref = zipfile.ZipFile(local_zip, 'r')\n",
    "zip_ref.extractall('/tmp/training')\n",
    "zip_ref.close()\n",
    "\n",
    "local_zip = path_validation_horse_or_human\n",
    "zip_ref = zipfile.ZipFile(local_zip, 'r')\n",
    "zip_ref.extractall('/tmp/validation')\n",
    "zip_ref.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "y9okX7_ovskI"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "500\n",
      "527\n",
      "128\n",
      "128\n"
     ]
    }
   ],
   "source": [
    "# Define our example directories and files\n",
    "train_dir = '/tmp/training'\n",
    "validation_dir = '/tmp/validation'\n",
    "\n",
    "train_horses_dir = os.path.join('/tmp/training/horses')\n",
    "train_humans_dir = os.path.join('/tmp/training/humans')\n",
    "validation_horses_dir = os.path.join('/tmp/validation/horses')\n",
    "validation_humans_dir = os.path.join('/tmp/validation/humans')\n",
    "\n",
    "train_horses_fnames = os.listdir(train_horses_dir)\n",
    "train_humans_fnames = os.listdir(train_humans_dir)\n",
    "validation_horses_fnames = os.listdir(validation_horses_dir)\n",
    "validation_humans_fnames = os.listdir(validation_humans_dir)\n",
    "\n",
    "print(len(train_horses_fnames))\n",
    "print(len(train_humans_fnames))\n",
    "print(len(validation_horses_fnames))\n",
    "print(len(validation_humans_fnames))\n",
    "\n",
    "# Expected Output:\n",
    "# 500\n",
    "# 527\n",
    "# 128\n",
    "# 128"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "O4s8HckqGlnb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 1027 images belonging to 2 classes.\n",
      "Found 256 images belonging to 2 classes.\n"
     ]
    }
   ],
   "source": [
    "# Add our data-augmentation parameters to ImageDataGenerator\n",
    "train_datagen = ImageDataGenerator(rescale = 1./255.,\n",
    "                                   rotation_range = 40,\n",
    "                                   width_shift_range = 0.2,\n",
    "                                   height_shift_range = 0.2,\n",
    "                                   shear_range = 0.2,\n",
    "                                   zoom_range = 0.2,\n",
    "                                   horizontal_flip = True)\n",
    "\n",
    "# Note that the validation data should not be augmented!\n",
    "test_datagen = ImageDataGenerator( rescale = 1.0/255. )\n",
    "\n",
    "# Flow training images in batches of 20 using train_datagen generator\n",
    "train_generator = train_datagen.flow_from_directory(train_dir,\n",
    "                                                    batch_size = 20,\n",
    "                                                    class_mode = 'binary', \n",
    "                                                    target_size = (150, 150))     \n",
    "\n",
    "# Flow validation images in batches of 20 using test_datagen generator\n",
    "validation_generator =  test_datagen.flow_from_directory( validation_dir,\n",
    "                                                          batch_size  = 20,\n",
    "                                                          class_mode  = 'binary', \n",
    "                                                          target_size = (150, 150))\n",
    "\n",
    "# Expected Output:\n",
    "# Found 1027 images belonging to 2 classes.\n",
    "# Found 256 images belonging to 2 classes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Blhq2MAUeyGA"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/3\n",
      "50/50 [==============================] - 37s 749ms/step - loss: 0.2896 - accuracy: 0.8825 - val_loss: 0.0046 - val_accuracy: 1.0000\n",
      "Epoch 2/3\n",
      "50/50 [==============================] - 37s 740ms/step - loss: 0.0998 - accuracy: 0.9595 - val_loss: 0.1550 - val_accuracy: 0.9583\n",
      "Epoch 3/3\n",
      "50/50 [==============================] - 36s 730ms/step - loss: 0.0826 - accuracy: 0.9696 - val_loss: 0.0572 - val_accuracy: 0.9750\n"
     ]
    }
   ],
   "source": [
    "# Run this and see how many epochs it should take before the callback\n",
    "# fires, and stops training at 97% accuracy\n",
    "\n",
    "callbacks = myCallback()\n",
    "history = model.fit_generator(train_generator,\n",
    "                              validation_data = validation_generator,\n",
    "                              steps_per_epoch = 50,\n",
    "                              epochs = 3,\n",
    "                              validation_steps = 12,\n",
    "                              verbose = 1,\n",
    "                              callbacks=[callbacks])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "C2Fp6Se9rKuL"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXoAAAEICAYAAABRSj9aAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nO3dd5gUVdbA4d8hjpKTq8QBUckCjhhBEVcBFRZFRUUBA8qC62L4ZNFVl9U1LpgxLYZdBREMSBBRUVEkDIggIoKIMmRHRbIMnO+PU4PNMKEHpqe6e877PPPQXV1VfbpmOHX71q1zRVVxzjmXvEqFHYBzzrnY8kTvnHNJzhO9c84lOU/0zjmX5DzRO+dckvNE75xzSc4TvSsUESktIltEpH5RrhsmEWksIkU+zlhEzhSRlRHPl4pI+2jWPYD3ek5Ehh7o9vns924ReaGo9+uKV5mwA3CxJSJbIp4eCuwEdgfPr1XVlwuzP1XdDVQs6nVLAlU9pij2IyJXA71V9fSIfV9dFPt2yckTfZJT1b2JNmgxXq2q7+W1voiUUdWs4ojNOVc8vOumhAu+mr8qIqNFZDPQW0ROEpFZIvKLiKwVkUdFpGywfhkRURFJDZ7/L3h9iohsFpHPRKRhYdcNXu8iIt+IyCYReUxEPhWRvnnEHU2M14rIchH5WUQejdi2tIiMEJFMEVkBdM7n+NwmImNyLHtCRIYHj68WkSXB5/k2aG3nta8METk9eHyoiPw3iG0xcFyOdW8XkRXBfheLSLdgeUvgcaB90C32Y8SxvSti++uCz54pIm+KyBHRHJuCiEiPIJ5fROQDETkm4rWhIrJGRH4Vka8jPuuJIjI/WL5eRB6M9v1cEVFV/ykhP8BK4Mwcy+4GfgPOw078hwDHAydg3/gaAd8Ag4L1ywAKpAbP/wf8CKQBZYFXgf8dwLqHAZuB7sFrNwK7gL55fJZoYnwLqAKkAj9lf3ZgELAYqAvUAD62/wq5vk8jYAtQIWLfG4C04Pl5wToCnAFsB1oFr50JrIzYVwZwevD4IeBDoBrQAPgqx7oXAUcEv5NLgxj+ELx2NfBhjjj/B9wVPD4riLE1kAI8CXwQzbHJ5fPfDbwQPG4axHFG8DsaCiwNHjcHvgcOD9ZtCDQKHs8FLgkeVwJOCPv/Qkn78Ra9A/hEVd9W1T2qul1V56rqbFXNUtUVwDPAaflsP05V01V1F/AylmAKu+65wAJVfSt4bQR2UshVlDHeq6qbVHUlllSz3+siYISqZqhqJnBfPu+zAvgSOwEB/BH4WVXTg9ffVtUVaj4A3gdyveCaw0XA3ar6s6p+j7XSI993rKquDX4nr2An6bQo9gtwGfCcqi5Q1R3AEOA0EakbsU5exyY/vYAJqvpB8Du6DztZnABkYSeV5kH333fBsQM7YR8lIjVUdbOqzo7yc7gi4oneAayKfCIiTURkkoisE5FfgWFAzXy2XxfxeBv5X4DNa93akXGoqmIt4FxFGWNU74W1RPPzCnBJ8PjS4Hl2HOeKyGwR+UlEfsFa0/kdq2xH5BeDiPQVkS+CLpJfgCZR7hfs8+3dn6r+CvwM1IlYpzC/s7z2uwf7HdVR1aXATdjvYUPQFXh4sGo/oBmwVETmiEjXKD+HKyKe6B3YV/lIT2Ot2MaqWhm4A+uaiKW1WFcKACIi7JuYcjqYGNcC9SKeFzT8cyxwpojUwVr2rwQxHgKMA+7FulWqAu9GGce6vGIQkUbASGAAUCPY79cR+y1oKOgarDsoe3+VsC6i1VHEVZj9lsJ+Z6sBVPV/qnoK1m1TGjsuqOpSVe2Fdc/9GxgvIikHGYsrBE/0LjeVgE3AVhFpClxbDO85EWgrIueJSBngBqBWjGIcC/xVROqISA3g1vxWVtV1wCfAC8BSVV0WvFQeKAdsBHaLyLlAp0LEMFREqordZzAo4rWKWDLfiJ3zrsFa9NnWA3WzLz7nYjRwlYi0EpHyWMKdoap5fkMqRMzdROT04L1vwa6rzBaRpiLSMXi/7cHPHuwDXC4iNYNvAJuCz7bnIGNxheCJ3uXmJqAP9p/4aeyiaUyp6nrgYmA4kAkcCXyOjfsv6hhHYn3pi7ALheOi2OYV7OLq3m4bVf0FGAy8gV3Q7ImdsKJxJ/bNYiUwBXgpYr8LgceAOcE6xwCR/drTgGXAehGJ7ILJ3v4drAvljWD7+li//UFR1cXYMR+JnYQ6A92C/vrywAPYdZV12DeI24JNuwJLxEZ1PQRcrKq/HWw8LnpiXaHOxRcRKY11FfRU1Rlhx+NcIvMWvYsbItI56MooD/wdG60xJ+SwnEt4nuhdPDkVWIF1C5wN9FDVvLpunHNR8q4b55xLct6id865JBd3Rc1q1qypqampYYfhnHMJZd68eT+qaq5DkuMu0aemppKenh52GM45l1BEJM87vKPquglGQywNqt0NyeX160RkkYgsEJFPRKRZxGt/C7ZbKiJnH9hHcM45d6AKTPTBeOYngC5YvYpLIhN54BVVbamqrbGbJrJLuDbDCiE1x26ueDLYn3POuWISTYu+HbA8qND3GzCG3yv5AXuLJmWrwO+1OLoDY1R1p6p+BywP9uecc66YRNNHX4d9q+xlYGVJ9yEiA7Ea4uWwetXZ287Kse1+hapEpD/QH6B+/bieXtS5pLFr1y4yMjLYsWNH2KG4QkhJSaFu3bqULZtXqaP9FdnFWFV9AnhCRC4FbsdqYkS77TNYPXHS0tJ8YL9zxSAjI4NKlSqRmpqKFQt18U5VyczMJCMjg4YNGxa8QSCarpvV7FtOdW9Z0jyMAf50gNs654rJjh07qFGjhif5BCIi1KhRo9DfwqJJ9HOx2WEaikg5gllmcrz5URFPz8Eq6xGs10tEyovNDXoUXrvEubjhST7xHMjvrMBEr6pZWK3sqcASYKyqLhaRYdkTFgODggmDF2D99H2CbRdjNay/At4BBqrq7kJHGY3du+GWW2Dlypjs3jnnElVU4+hVdbKqHq2qR6rqPcGyO1R1QvD4BlVtrqqtVbVjkOCzt70n2O4YVZ0Sm48BfPstPPccnHQSzJ8fs7dxzhWNzMxMWrduTevWrTn88MOpU6fO3ue//RZdufp+/fqxdOnSfNd54oknePnll4siZE499VQWLFhQJPsqTnF3Z+wBO/po+PRT6NIFOnSA116zx865uFSjRo29SfOuu+6iYsWK3Hzzzfuso6qoKqVK5d4mff755wt8n4EDBx58sAkuuYqaNWsGn30GRx0F550Hzz4bdkTOuUJavnw5zZo147LLLqN58+asXbuW/v37k5aWRvPmzRk2bNjedbNb2FlZWVStWpUhQ4Zw7LHHctJJJ7FhwwYAbr/9dh5++OG96w8ZMoR27dpxzDHHMHPmTAC2bt3KBRdcQLNmzejZsydpaWlRt9y3b99Onz59aNmyJW3btuXjjz8GYNGiRRx//PG0bt2aVq1asWLFCjZv3kyXLl049thjadGiBePGRTO52cFLnhZ9ttq14eOP4cILoX9/+OEHGDYM/KKTc3n761+hqLskWreGIMEW1tdff81LL71EWloaAPfddx/Vq1cnKyuLjh070rNnT5o12/cG/U2bNnHaaadx3333ceONNzJq1CiGDNmvYguqypw5c5gwYQLDhg3jnXfe4bHHHuPwww9n/PjxfPHFF7Rt2zbqWB999FHKly/PokWLWLx4MV27dmXZsmU8+eST3HzzzVx88cXs3LkTVeWtt94iNTWVKVOm7I25OCRXiz5bpUrw9ttw5ZVw993Qty9E2efnnAvfkUceuTfJA4wePZq2bdvStm1blixZwldffbXfNocccghdgu7a4447jpV5DMw4//zz91vnk08+oVevXgAce+yxNG/ePOpYP/nkE3r37g1A8+bNqV27NsuXL+fkk0/m7rvv5oEHHmDVqlWkpKTQqlUr3nnnHYYMGcKnn35KlSpVon6fg5F8LfpsZcvaxdkGDeDOO2HNGhg3DorpwDqXUA6w5R0rFSpU2Pt42bJlPPLII8yZM4eqVavSu3fvXMeRlytXbu/j0qVLk5WVleu+y5cvX+A6ReHyyy/npJNOYtKkSXTu3JlRo0bRoUMH0tPTmTx5MkOGDKFLly4MHTo0ZjFkS84WfTYRuOMOeP55+PBDu0i72u/Xci6R/Prrr1SqVInKlSuzdu1apk6dWuTvccoppzB27FjA+tZz+8aQl/bt2+8d1bNkyRLWrl1L48aNWbFiBY0bN+aGG27g3HPPZeHChaxevZqKFSty+eWXc9NNNzG/mEYIJm+LPlLfvtZ337MnnHgiTJ4MLVuGHZVzLgpt27alWbNmNGnShAYNGnDKKacU+Xtcf/31XHHFFTRr1mzvT17dKmefffbeOjPt27dn1KhRXHvttbRs2ZKyZcvy0ksvUa5cOV555RVGjx5N2bJlqV27NnfddRczZ85kyJAhlCpVinLlyvHUU08V+WfJTdzNGZuWlqYxm3hkwQLo2hW2boXXX4dOnWLzPs4lgCVLltC0adOww4gLWVlZZGVlkZKSwrJlyzjrrLNYtmwZZcrEZ1s4t9+diMxT1bTc1o/PTxErrVvDrFmW7Lt0gf/8By6/POyonHMh27JlC506dSIrKwtV5emnn47bJH8gkueTRKt+ffjkE+jRA664Alatgr/9zYdfOleCVa1alXnz5oUdRswk98XYvFStCu+8A5ddBrfdBtddBzG8+u6cc2EqeS36bOXLw0svWQv/3nttNM6YMVCxYtiROedckSqZLfpspUrBv/4FI0fClClw+umwbl3YUTnnXJEq2Yk+23XXwZtvwpIlVv3y66/Djsg554qMJ/ps551nN1Vt3Qonn2wXbJ1zMdOxY8f9bn56+OGHGTBgQL7bVQy6V9esWUPPnj1zXef000+noGHaDz/8MNu2bdv7vGvXrvzyyy/RhJ6vu+66i4ceeuig91OUPNFHOv54G35ZqxaceaaVOnbOxcQll1zCmDFj9lk2ZswYLrnkkqi2r1279kFVf8yZ6CdPnkzVqlUPeH/xzBN9To0awcyZcNxxcPHFMGJE2BE5l5R69uzJpEmT9k4ysnLlStasWUP79u33jmtv27YtLVu25K233tpv+5UrV9KiRQvASgX36tWLpk2b0qNHD7Zv3753vQEDBuwtcXznnXcCVnFyzZo1dOzYkY4dOwKQmprKjz/+CMDw4cNp0aIFLVq02FvieOXKlTRt2pRrrrmG5s2bc9ZZZ+3zPgXJbZ9bt27lnHPO2Vu2+NVXXwVgyJAhNGvWjFatWu1Xo/9AlNxRN/mpUQPee89uprrxRvj+e/j3v6F06bAjcy4mwqhSXL16ddq1a8eUKVPo3r07Y8aM4aKLLkJESElJ4Y033qBy5cr8+OOPnHjiiXTr1i3P+VJHjhzJoYceypIlS1i4cOE+ZYbvueceqlevzu7du+nUqRMLFy7kL3/5C8OHD2f69OnUrFlzn33NmzeP559/ntmzZ6OqnHDCCZx22mlUq1aNZcuWMXr0aJ599lkuuugixo8fv7dyZX7y2ueKFSuoXbs2kyZNAqxscWZmJm+88QZff/01IlIk3Uneos/LIYfAq6/a/4BHHrH69oU4ezvnChbZfRPZbaOqDB06lFatWnHmmWeyevVq1q9fn+d+Pv74470Jt1WrVrRq1Wrva2PHjqVt27a0adOGxYsXF1iw7JNPPqFHjx5UqFCBihUrcv755zNjxgwAGjZsSOvWrYH8SyFHu8+WLVsybdo0br31VmbMmEGVKlWoUqUKKSkpXHXVVbz++usceuihUb1HfrxFn5/Spa3rpn59uOkmq40zYQLkaAE4l+jCqlLcvXt3Bg8ezPz589m2bRvHHXccAC+//DIbN25k3rx5lC1bltTU1FxLExfku+++46GHHmLu3LlUq1aNvn37HtB+smWXOAYrc1yYrpvcHH300cyfP5/Jkydz++2306lTJ+644w7mzJnD+++/z7hx43j88cf54IMPDup9vEUfjcGDYexYm3T85JNtInLn3EGrWLEiHTt25Morr9znIuymTZs47LDDKFu2LNOnT+f777/Pdz8dOnTglVdeAeDLL79k4cKFgJU4rlChAlWqVGH9+vV7Z3YCqFSpEps3b95vX+3bt+fNN99k27ZtbN26lTfeeIP27dsf1OfMa59r1qzh0EMPpXfv3txyyy3Mnz+fLVu2sGnTJrp27cqIESP44osvDuq9wVv00evZE444Arp1s7H2EydCu3ZhR+Vcwrvkkkvo0aPHPiNwLrvsMs477zxatmxJWloaTZo0yXcfAwYMoF+/fjRt2pSmTZvu/WZw7LHH0qZNG5o0aUK9evX2KXHcv39/OnfuTO3atZk+ffre5W3btqVv3760C/5/X3311bRp0ybqbhqAu+++e+8FV4CMjIxc9zl16lRuueUWSpUqRdmyZRk5ciSbN2+me/fu7NixA1Vl+PDhUb9vXkpWmeKisHSpVb5ct8768M87L+yInDsgXqY4cRW2TLF33RTWMcfAZ59B8+bwpz9Z+QTnnItjnugPxB/+YHfRdukCf/4zDBkCe/aEHZVzzuUqqkQvIp1FZKmILBeRIbm8fqOIfCUiC0XkfRFpEPHabhFZEPxMKMrgQ1WhgtXHufZauP9+6N0bdu4MOyrnCiXeum5dwQ7kd1bgxVgRKQ08AfwRyADmisgEVY0cjPo5kKaq20RkAPAAcHHw2nZVbV3oyBJBmTLWdZOaapOXrF0Lb7xh9e6di3MpKSlkZmZSo0aNPG9EcvFFVcnMzCQlJaVQ20Uz6qYdsFxVVwCIyBigO7A30avq9Ij1ZwEF3yqWLESs66ZePejXD045xUoe168fdmTO5atu3bpkZGSwcePGsENxhZCSkkLdunULtU00ib4OsCrieQZwQj7rXwVMiXieIiLpQBZwn6q+WagIE8Vll9nwyx494MQTYfJkuwfcuThVtmxZGjZsGHYYrhgU6cVYEekNpAEPRixuEAz5uRR4WESOzGW7/iKSLiLpCd26OOMM+PRTu6O2fXvIUYLVOefCEE2iXw3Ui3heN1i2DxE5E7gN6Kaqe69Kqurq4N8VwIdAm5zbquozqpqmqmm1atUq1AeIOy1aWKnjRo3gnHPg+efDjsg5V8JFk+jnAkeJSEMRKQf0AvYZPSMibYCnsSS/IWJ5NREpHzyuCZxCRN9+0qpTB2bMsBb+lVfCXXeBj25wzoWkwESvqlnAIGAqsAQYq6qLRWSYiHQLVnsQqAi8lmMYZVMgXUS+AKZjffTJn+gBKleGSZOgTx/4xz/gqqtg166wo3LOlUBR1bpR1cnA5BzL7oh4fGYe280EWh5MgAmtbFnrumnQAIYNgzVrbNaqSpXCjsw5V4L4nbGxJmIt+uees8lMOnSwhO+cc8XEE31xueoqePttWLbMql8uXhx2RM65EsITfXHq0gU+/hh++81urPrww7Ajcs6VAJ7oi1vbtjb8snZtOPtsGD067Iicc0nOE30YGjSwG6tOPBEuvdSKovnwS+dcjHiiD0u1avDuu3DxxVYrZ+BA2L077Kicc0nIpxIMU/ny8MorVgDtwQchI8O6cipUCDsy51wS8RZ92EqVggcegMcft3loO3aEDRsK3s4556LkiT5eDBxotey//NKGX37zTdgROeeShCf6eNK9O0yfDr/+CiefDDNnhh2Rcy4JeKKPNyecYJOPV6sGnTpZK9855w6CJ/p41LixteZbt4YLLoBHHw07IudcAvNEH69q1YL334du3eCGG+Cmm2DPnrCjcs4lIE/08ezQQ2H8eBg0CIYPh169YMeOsKNyziUYH0cf70qXtq6b1FS4+WZYuxbeeguqVw87MudcgvAWfSIQsa6bMWNgzhwbkfPdd2FH5ZxLEJ7oE8nFF8O0abB+vY21T08POyLnXALwRJ9oOnSwETkpKXDaaTB5csHbOOdKNE/0iahpUxtr36SJjcp55pmwI3LOxTFP9InqiCPgo4/grLPg2mvhttu81LFzLlee6BNZxYowYQJcfTX8619wxRU2e5VzzkXw4ZWJrkwZ67pp0AD+/ncbfjl+PFSpEnZkzrk44S36ZCACt98OL75o3Tnt21tte+ecwxN9crniChuFs3KlTVO4cGHYETnn4oAn+mTzxz/CJ5/Y4/bt4b33wo3HORc6T/TJqFUrmDXLpijs0gVeeinsiJxzIYoq0YtIZxFZKiLLRWRILq/fKCJfichCEXlfRBpEvNZHRJYFP32KMniXj7p1rWXfoQP06QN33+3DL50roQpM9CJSGngC6AI0Ay4RkWY5VvscSFPVVsA44IFg2+rAncAJQDvgThGpVnThu3xVqQJTpkDv3jYip39/yMoKOyrnXDGLpkXfDliuqitU9TdgDNA9cgVVna6q24Kns4C6weOzgWmq+pOq/gxMAzoXTeguKuXKWdfN0KHw3HN2J+2WLWFH5ZwrRtEk+jrAqojnGcGyvFwFTCnMtiLSX0TSRSR948aNUYTkCkUE7rkHnn4a3n3XauSsWxd2VM65YlKkF2NFpDeQBjxYmO1U9RlVTVPVtFq1ahVlSC5S//52J+3XX9vwyyVLwo7IOVcMokn0q4F6Ec/rBsv2ISJnArcB3VR1Z2G2dcWoa1e7qWr7djjlFJgxI+yInHMxFk2inwscJSINRaQc0AuYELmCiLQBnsaS/IaIl6YCZ4lIteAi7FnBMhemtDQbfnnYYXDmmTB2bNgROediqMBEr6pZwCAsQS8BxqrqYhEZJiLdgtUeBCoCr4nIAhGZEGz7E/BP7GQxFxgWLHNha9gQPv0Ujj/eJjT59799+KVzSUo0zv5zp6WlabrPnFR8duyAyy+HcePg+uthxAibp9Y5l1BEZJ6qpuX2mt8ZW9KlpMCrr8KNN8Jjj8GFF8K2bQVv55xLGJ7oHZQqZV03jzwCb74JnTqBD3N1Lml4one/+8tfrAtnwQI4+WRYvjzsiJxzRcATvdvX+efD++/Dzz/DSSfB7NlhR+ScO0ie6N3+Tj4ZZs6EypWhY0d4662wI3LOHQRP9C53Rx8Nn30GLVpYK/+JJ8KOyDl3gDzRu7wddhhMnw7nnAODBsGtt8KePWFH5ZwrJE/0Ln8VKsAbb8CAAfDAA3DZZbBzZ8HbOefiRpmwA3AJoHRp67pp0ACGDIE1a2wYZjWfWsC5ROAtehcdEeu6efll67s/5RT4/vuwo3LORcETvSucSy+1mvZr1lip488/Dzsi51wBPNG7wjv9dCuIVraszUk71QuSOhfPPNG7A9O8uZU6btzYRuX85z9hR+Scy4MnenfgateGjz+22jhXXw133umljp2LQ57o3cGpVAkmToR+/WDYMLjySti1K+yonHMRfHilO3hly1rXTYMGcNddsHq1FUerXDnsyJxzeIveFRUR67oZNcrupu3QwRK+cy50nuhd0erXDyZNgm+/teqXX34ZdkTOlXie6F3RO+ssmDEDsrLg1FOthe+cC40nehcbrVvb8Ms6deDss+2OWudcKDzRu9ipXx8++cTq2/fuDffe68MvnQuBJ3oXW9Wq2Z2zl1wCQ4fCn/9sXTrOuWLjwytd7JUvD//7nw2/vO8+yMiAMWOsBLJzLua8Re+KR6lS1nXz5JMwebJNUbh+fdhROVcieKJ3xWvAAJvI5Msvbfjl0qVhRxSVBQvs3HTeefDee36pwSWWqBK9iHQWkaUislxEhuTyegcRmS8iWSLSM8dru0VkQfAzoagCdwmsWzf48EPYssUu1H76adgR5WnXLvjnP+H442HJEpgzB/74Rzj2WLs3bMeOsCN0rmAFJnoRKQ08AXQBmgGXiEizHKv9APQFXsllF9tVtXXw0+0g43XJol07m8CkRg0rijZ+fNgR7eerr+w8dMcdcOGFsHixzbUyapTdCHzVVTaw6M47vRfKxbdoWvTtgOWqukJVfwPGAN0jV1DVlaq6EPCZo130jjwSZs6Etm0tkz78cNgRAbB7Nzz4oIW1cqWV7XnlFTsnpaTYzb8LFsD778MJJ1gtt/r1oW9f+OKLsKN3bn/RJPo6wKqI5xnBsmiliEi6iMwSkT/ltoKI9A/WSd+4cWMhdu0SXs2aljF79IDBg+1nT3jtheXLrUzP//0fdO1qrfgLLth/PRE44wx4+227zHDNNfDaa3afWPbyED+Gc/sojouxDVQ1DbgUeFhEjsy5gqo+o6ppqppWq1atYgjJxZVDDoGxY+GGG6xVf9FFsH17sYawZw88/rj1vX/1lY0GHT8eDjus4G2PPtq2zciA+++HZcvsMsQxx9jyLVtiH79z+Ykm0a8G6kU8rxssi4qqrg7+XQF8CLQpRHyupChd2pL88OGWYc88EzIzi+Wtv//eLrBefz2cdpoNCLrsMmu1F0a1avZNYMUKu02gRg3bZ716tvyHH2ITv3MFiSbRzwWOEpGGIlIO6AVENXpGRKqJSPngcU3gFOCrAw3WlQCDB1vrft48uxK6YkXM3koVnnsOWraEuXPt8aRJVp7nYJQtCxdfbKV+Zs60Gm/Dh0OjRr8vd644FZjoVTULGARMBZYAY1V1sYgME5FuACJyvIhkABcCT4vI4mDzpkC6iHwBTAfuU1VP9C5/F15og9V//NHG2s+dW+RvsWaNTXV7zTU2dHLRIhtFU9hWfEFOOglefdXOV4MHWzWIk076fblXg3DFQTTO7vxIS0vT9PT0sMNw8WDpUujcGTZssKx47rkHvUtVK6R5/fWwcyc88ICV3ylVTLcObtkCL7wAjzxiF37r1bNYrrkGqlYtnhhcchKRecH10P34nbEufh1zjI21b9oUuneHp58+qN1t2GAjaC6/HJo1s6GQgwYVX5IHqFjR3vPrr+Gtt6BxY+u/r1vXli9bVnyxuJLDE72Lb4cfbnfRdu4M111nFTAPYNziuHHQvLmV2XnwQfj4YzjqqKIPN1qlS9vInA8+gM8/h5494dln7dzWrZvN1RJnX7ZdAvNE7+JfxYrW/O3f3wqjXXEF/PZbVJv+9BNceql1+6emwvz5cPPNlmjjRevW1p3z/ffw97/bxdozzoA2bWz5zp1hR+gSnSd6lxjKlIGnnoJ77rFO9s6d4Zdf8t1k4v7/NOkAABiqSURBVERrxb/2mtWrmTnTumzi1eGHwz/+YcMwn3vO7tDt18+qOw8bZl1Pzh0IT/QucYhY181//2szV516Kqxatd9qmzbBlVdapcnDDrNBO7ffbsMeE0FKio0AWrgQpk2D446zejr169vyRYvCjtAlGk/0LvH07g3vvGNJ/sQT9ykw8957Ni7+xRftnDBnjnWNJCIRu29s0iSrnNmvH4weDa1a/b7cyyy4aHiid4npjDOsVV+qFLRvz5YJH/DnP9sdrhUq2GCde+6xya2SQZMmMHKklVm4914btXPuudYVNXIkbN0adoQunnmid4mrZUv47DNmHHY+x3ZvwFNPKTfeaBdc27ULO7jYqF4dhgyB776zipqVK9t9APXq2fKMjLAjdPHIE71LWNu3w43D63LaiufhkEP4SDvw7yrDOCQl+cclli1r863Pnm1fbM44w4aNpqba8jlzwo7QxRNP9C4hzZ5tww9HjIABA4QvMmrS/opGdtXymmtsaqgSQAROOcXuE/j2WysAOnmy1cnPXu5lFpwnepdQdu6E226zemfbttmolCeegIrVy9mg87//Hf7zH7vraPPmsMMtVqmp8O9/W/fNI4/AunV2/0DjxrZ806awI3Rh8UTvEsaCBdb3/q9/2WxOixbZ6JO9RGzA+bPP2hngtNNg7dqwwg1NpUrwl7/AN9/YPOypqXaTWN261uL/9tuwI3TFzRO9i3uRE3Rv2GCzN/3nP1ClSh4bXH21rfTNN1Ym8quSWTC1dGn405+sgsS8eTaJ18iRVvrhT3+Cjz7yMgslhSd6F9dyTtD95ZdRFrHs0sUy2Y4d1ln90UcxjzWetW0LL71kc+AOHWoXcE8/3W7GeumlqCtKuATlid7Fpfwm6I7accdZ4ZjDD7fZP8aMiVW4CaN2bbj7brvX7Jln7JpHnz5WZuHuu20KAJd8PNG7uLNsWXQTdEclNdWK3Jx4oo07fPBB76/Apum95hr7hjR1qt09/Pe/23j8a66xY+6Shyd6FzcOZoLufFWrZtnsoovs7HH99faVwSFiX3amTLHkfsUVdtxbtICzz7ZKE15mIfF5ondxYeVKG0Fz/fXWd3ygE3TnKSXFCsXcfLONx7zgAhuf6fZq1szmdlm1yspHLFpklzqaN7flfrgSlyd6F6rICbrT04tugu5clSplXTePPQYTJtjtpBs3xuCNElvNmnbBduVKKxR66KE250u9erZ89eqwI3SF5YnehWb16t8n6G7XLnYTdO9n0CDrE/riCxt+6fP35apcOSsUmp5uM3Kddhrcd59d9ujd24ZsusTgid4VO9Xf+4E/+sj65adNs5EfxaZHD5uvb9MmG785a1YxvnliEYH27eH1121C80GD7AtRWtrvy/2SR3zzRO+K1fr1cP75NkF38+bWqB44sHgn6N7rxBOtnnGVKtCxI7z5ZghBJJZGjay+UEYGDB9u/15wgd2E9fDD8OuvYUfocuOJ3hWbceOsFT9linWVf/SR1WEJVePGluyPPdbOQI8/HnJAiaFyZRg82Fr448fbNZXBg63MwuDBVkbZxQ9P9C7mMjNtCHvcTtBdqxZ88IEVQrv+erjlFh9TGKXSpe38OGOGTdnYrZudKxs3/n2537YQPk/0LqYmTrRW/LhxcT5B96GHWtN04EB46CE7M+3YEXZUCSUtza69rFwJt95q39g6dLAaRS+/7GUWwhRVoheRziKyVESWi8iQXF7vICLzRSRLRHrmeK2PiCwLfvoUVeAuvm3aZHOcJtQE3aVL29DLBx+EsWPtTqKffgo7qoRTp45VGF21Cp56yqY57N0bGja05ZmZYUdYAqlqvj9AaeBboBFQDvgCaJZjnVSgFfAS0DNieXVgRfBvteBxtfze77jjjlOX2KZNU61XT7VUKdWhQ1V37Ag7ogMwZoxquXKqTZqofvdd2NEktN27VSdPVj3rLFVQPeQQ1WuvVf3qq7AjSy5AuuaRV6Np0bcDlqvqClX9DRgDdM9xslipqguBnB2bZwPTVPUnVf0ZmAZ0LtypyCWKLVtIngm6L77YxnyuW2dj7efPDzuihFWqlN1hO3Xq73c8v/CCdeF16QLvvuv9+LEWTaKvA6yKeJ4RLIvGwWzrEsiMGTZw5amnSJ4Jujt0gE8/tTuHOnSw4ULuoDRvbvPCrFpl12wWLLCaOi1a2PLt28OOMDnFxcVYEekvIukikr7Rb0lPKNu3W2I/7TR7/tFHNm3dIYeEG1eRadbMbqY6+mi74HDRRfaBH3zQrjB+8AEsWQK//OLN0kKoVcuu2axcCS++aOfS/v2hfn2rolkCJwaLqTJRrLMaqBfxvG6wLBqrgdNzbPthzpVU9RngGYC0tDT/35IgZs+2WuZLl1qXzf33Q8WKYUcVA0ccYWewQYNs2NCkSblX+DrkEFv3iCOs8Hv245zPq1cvhjoPiaF8eauYefnlVmZhxAjr7rv/fujVy8bkt2kTdpSJT7SAVoiIlAG+ATphiXsucKmq7lexWkReACaq6rjgeXVgHtA2WGU+cJyq5jmUIS0tTdPT0wv/SVyx2bkT/vEP+89Ypw6MGpVj7tZkp2oTj69daz9r1uT+eO3a3G8VLVcu75NA5OOaNUO6ZThcy5fb4KdRo+y6T4cOlvDPOy+O7r2IQyIyT1XTcn2toEQf7KAr8DA2AmeUqt4jIsOwq7wTROR44A1sZM0OYJ2qNg+2vRIYGuzqHlV9Pr/38kQf3xYssBbYokVw5ZV2G3yec7c6G1uY10kg8vnPP++/bZkyNjtWQd8SDjssKTPgL7/Y3MCPPgo//ABHHmmTnvfrZxOgu30ddKIvTp7o49OuXVa5cNgwa2g+95xVnnRFZPt2G+FT0Akht7n+SpWCP/yh4G8Jf/hDnN/IkLusLCtDNGKE9ZxVrmzzv19/vd1p7YwnendQFi+2vvh58+DSS+1rdfXqYUdVQv322+8nhPy6jTZs2P/isIidpfPqKsp+fvjhcTsmds4cS/ivvWYf7/zz4a9/tQKkJf2yhyd6d0B277aumdtvt1bUU08dxNytrnhlZVmp0IJOCOvX515juHr1/C8oZz8OaXhVRobV1HnmGev1Ov5468fv2TMhv7QUCU/0rtCWLYO+fe2rco8eluQPeu5WF39277ZZtgo6IaxbZ/13OVWpEt0JIUbDsbZuteGZjzwC33xjgwMGDbKhmiXtW6cnehe1PXtsStVbb7Vv748/bt01Jf1rcYm3Z48VqYnmwvLOnftvX7FiwcNOa9e2r44H8Me2Z4/dzzZiBLz/vtWo69MHbrgBjjmmCD5/AvBE76KycqWNpJk+3W5Nf/bZGM3d6pKXqvWlRHNCyO9ehIJOCNWq5XlCWLTIJkF5+WU753Ttat06nTold4PFE73LV/YE3TfeaP8RRoywhJ/M/ylcyFTtHoO8TgKRjzdv3n/78uV/H3qax8XlDWVqM/K1Gjw5shQbNtgE9H/9q31DTUkp/o8ca57oXZ5Wr7ahau+8A2ecYTepFOvcrc4VZMuWvE8Ikc9/+WX/bcuUYccfGjCm3OWMyLyChb82pFaFrQzo+DV/vvgn/tCsRtLci+CJ3u0ne4Luv/zFRuw98AAMGFAib8R0yWL79nxPCLp6DdNXNebhX/sxkXMpyy4uYTSDGcGxpb7c916EvIagxvG9CJ7o3T7Wr4frrrObUE45xUrGhj53q3PFZedOln32I488XprnJ9Zk284ydGywgsFHTeScMlMptXa1nRw2bsz9XoRatQq+WzmEexE80bu9xo2zlvvmzXD33XaRKsG/sTp3wH7+2a5PPfaYlU5u3NhG6vTtCxXL79r3XoS8riOsX5/7HMM1akRX06iI7kXwRO/IzLTxxWPG2NyeL74Yp3O3OheCXbvg9ddtIMLs2VC1Klxzjf2fqV+/gI2z70XI62Jy9uN16+xGtpwi70U4/nirNXIAPNGXcBMn2h9tZibccQcMGWL1spxz+5s1yxL++PH2/IIL7JvviSce5I6z70XIr9ppw4Y2LvQAeKIvoTZtsuFkL7wArVpZK75167Cjci4x/PDD72UWNm2CE06whH/BBfHZUMov0fsYiyQ1bZqNG/7vf+G222DuXE/yzhVG/fo2Gi0jw/rwMzNtMpRGjWyCsdxGc8YrT/RJJnuC7rPOsgm6Z860i67lyoUdmXOJqWJF66tfuhQmTLALtv/3f1C3ri1ftizsCAvmiT6JfPxxEk7Q7VycKFXKZrn64AP4/HO48EIrE3LMMdCtmy2Ps57wvTzRJ4HsCbpPP92eJ90E3c7Fmdat4fnn4fvvbTLzWbOslk6bNnZNLLe6bmHyRJ/gZs+2P64RI2x8/BdfQPv2YUflXMlw+OE2f/IPP9i0h7t321SH9evb8g0bwo7QeKJPUDt3wtChNrPOtm128fWJJ2JW9ts5l4+UFCsEuHCh/V9MS4O77rKEf9VVVlEzTJ7oE9Dnn9t9Fffea3fwLVoEZ54ZdlTOORH7vzhpEnz9tSX/0aNteHP28txuoo01T/QJZNcum5y7XTu7EW/iRPu6WKVK2JE553I65hh48kkbnnnffZb4zz0Xmja15Vu3Fl8snugTxOLFcNJJcOedcNFF9vycc8KOyjlXkOrVbca2776DV16xhtnAgVCvnt2lnpER+xg80ce53bvtpo22be0K/7hxdod0SZsP07lEV7YsXHKJDaD45BMbpfPgg5CaasvnzInde3uij2PffGMjaG691b7yLV5st1875xKXiJUHf+01+PZbq5Y5ebKVWOjcOTZj8T3Rx6E9e+yW69atYckSmyBk3DibBMc5lzxSU+2el4wMeOQRm+UtFlN4xmFpnpItcoLurl3tzrvatcOOyjkXS5Uq2WxvsRJVi15EOovIUhFZLiJDcnm9vIi8Grw+W0RSg+WpIrJdRBYEP08VbfjJQ9WSesuWkJ5ukyFMnOhJ3jl38Aps0YtIaeAJ4I9ABjBXRCao6lcRq10F/KyqjUWkF3A/cHHw2req6nUT8+ETdDvnYimaFn07YLmqrlDV34AxQPcc63QHXgwejwM6icSipym5qFoZ4RYtrCDZ44/bXXWe5J1zRSmaRF8HWBXxPCNYlus6qpoFbAJqBK81FJHPReQjEcm1CouI9BeRdBFJ37hxY6E+QKJavx569IArroDmza1GzcCBViHPOeeKUqzTylqgvqq2AW4EXhGRyjlXUtVnVDVNVdNq1aoV45DC99prltzfecfG0X70kdW4ds65WIgm0a8G6kU8rxssy3UdESkDVAEyVXWnqmYCqOo84Fvg6IMNOlFlZtqNERddZFNDzp8PN98MpUuHHZlzLplFk+jnAkeJSEMRKQf0AibkWGcC0Cd43BP4QFVVRGoFF3MRkUbAUcCKogk9sbz9tvXFjx8P//wnfPYZNGsWdlTOuZKgwFE3qpolIoOAqUBpYJSqLhaRYUC6qk4A/gP8V0SWAz9hJwOADsAwEdkF7AGuU9WfYvFB4lXOCbqnTPG5W51zxUs0zua+SktL0/T09LDDKBLvvmu1qNeuteJFd9zhc7c652JDROapalpur/mdsTGwZQvccovN3dqkiU3Q7XO3OufC4oP5ithHH1kXzdNPw003+QTdzrnweaIvItu3w+DB0LGjjYX/+GN46CGfoNs5Fz7vuikCs2ZBnz5WVnjgQLj/fqhQIeyonHPOeIv+IOzcCX/7m9WW3r4d3nvPyhh4knfOxRNv0R+gzz+38gVffmllhYcP97lbnXPxyVv0hRQ5QfePP/oE3c65+Oct+kJYvNj64ufNg0svtVmgfO5W51y88xZ9FHyCbudcIvMWfQG++Qb69rXaNOefDyNH+tytzrnE4i36POzZA48+6hN0O+cSn7foc7FyJfTrBx9+6BN0O+cSn7foI6jCM8/YBN3z5vkE3c655OAt+kBGhk3QPXWqT9DtnEsuJb5FrwovvWSTgsyY4RN0O+eST4lu0a9fD9deC2+9ZWUMXnjB5251ziWfEtuij5yg+6GHfIJu51zyKnGJPjMTevXad4Lum27yCbqdc8mrRCX6CROsFf/66z5Bt3Ou5CgRffS//GITdL/4os3+9M47PkG3c67kSPoW/bvv2rj4//0PbrsN5s71JO+cK1mStkXvE3Q755xJyha9T9DtnHO/S6pE7xN0O+fc/pKm6+a776BzZ5+g2znncoqqRS8inUVkqYgsF5EhubxeXkReDV6fLSKpEa/9LVi+VETOLrrQ91W7Nhx9tE/Q7ZxzORXYoheR0sATwB+BDGCuiExQ1a8iVrsK+FlVG4tIL+B+4GIRaQb0ApoDtYH3RORoVd1d1B+kfHl4++2i3qtzziW+aFr07YDlqrpCVX8DxgDdc6zTHXgxeDwO6CQiEiwfo6o7VfU7YHmwP+ecc8UkmkRfB1gV8TwjWJbrOqqaBWwCakS5LSLSX0TSRSR948aN0UfvnHOuQHEx6kZVn1HVNFVNq1WrVtjhOOdcUokm0a8G6kU8rxssy3UdESkDVAEyo9zWOedcDEWT6OcCR4lIQxEph11cnZBjnQlAn+BxT+ADVdVgea9gVE5D4ChgTtGE7pxzLhoFjrpR1SwRGQRMBUoDo1R1sYgMA9JVdQLwH+C/IrIc+Ak7GRCsNxb4CsgCBsZixI1zzrm8iTW840daWpqmp6eHHYZzziUUEZmnqmm5vRYXF2Odc87FTty16EVkI/D9QeyiJvBjEYVTlDyuwvG4CsfjKpxkjKuBquY6bDHuEv3BEpH0vL6+hMnjKhyPq3A8rsIpaXF5141zziU5T/TOOZfkkjHRPxN2AHnwuArH4yocj6twSlRcSddH75xzbl/J2KJ3zjkXwRO9c84luYRJ9PE6y1UUcd0oIl+JyEIReV9EGkS8tltEFgQ/OesHxTquviKyMeL9r454rY+ILAt++uTcNsZxjYiI6RsR+SXitVger1EiskFEvszjdRGRR4O4F4pI24jXYnm8CorrsiCeRSIyU0SOjXhtZbB8gYgU6e3mUcR1uohsivh93RHxWr5/AzGO65aImL4M/qaqB6/F8njVE5HpQS5YLCI35LJO7P7GVDXuf7AaO98CjYBywBdAsxzr/Bl4KnjcC3g1eNwsWL880DDYT+lijKsjcGjweEB2XMHzLSEer77A47lsWx1YEfxbLXhcrbjiyrH+9VhtpZger2DfHYC2wJd5vN4VmAIIcCIwO9bHK8q4Ts5+P6BLdlzB85VAzZCO1+nAxIP9GyjquHKsex5WgLE4jtcRQNvgcSXgm1z+T8bsbyxRWvTxOstVgXGp6nRV3RY8nYWVao61aI5XXs4GpqnqT6r6MzAN6BxSXJcAo4vovfOlqh9jBfny0h14Sc0soKqIHEFsj1eBcanqzOB9ofj+vqI5Xnk5mL/Noo6rOP++1qrq/ODxZmAJ+0/CFLO/sURJ9DGf5SqGcUW6CjtjZ0sRm1lrloj8qYhiKkxcFwRfEceJSPa8AXFxvIIurobABxGLY3W8opFX7LE8XoWV8+9LgXdFZJ6I9A8hnpNE5AsRmSIizYNlcXG8RORQLFmOj1hcLMdLrFu5DTA7x0sx+xsrsEyxKxoi0htIA06LWNxAVVeLSCPgAxFZpKrfFlNIbwOjVXWniFyLfRs6o5jeOxq9gHG6b1nrMI9XXBORjliiPzVi8anB8ToMmCYiXwct3uIwH/t9bRGRrsCb2HwU8eI84FNVjWz9x/x4iUhF7OTyV1X9tSj3nZ9EadHH6yxXUe1bRM4EbgO6qerO7OWqujr4dwXwIXaWL5a4VDUzIpbngOOi3TaWcUXoRY6v1TE8XtHIK/bQZ1ETkVbY77C7qmZmL484XhuANyi6LssCqeqvqroleDwZKCsiNYmD4xXI7+8rJsdLRMpiSf5lVX09l1Vi9zcWiwsPRf2DffNYgX2Vz76A0zzHOgPZ92Ls2OBxc/a9GLuCorsYG01cbbCLT0flWF4NKB88rgkso4guSkUZ1xERj3sAs/T3Cz/fBfFVCx5XL664gvWaYBfGpDiOV8R7pJL3xcVz2PdC2ZxYH68o46qPXXc6OcfyCkCliMczgc7FGNfh2b8/LGH+EBy7qP4GYhVX8HoVrB+/QnEdr+CzvwQ8nM86MfsbK7KDG+sf7Ir0N1jSvC1YNgxrJQOkAK8Ff/RzgEYR294WbLcU6FLMcb0HrAcWBD8TguUnA4uCP/RFwFXFHNe9wOLg/acDTSK2vTI4jsuBfsUZV/D8LuC+HNvF+niNBtYCu7A+0KuA64DrgtcFeCKIexGQVkzHq6C4ngN+jvj7Sg+WNwqO1RfB7/m2Yo5rUMTf1ywiTkS5/Q0UV1zBOn2xARqR28X6eJ2KXQNYGPG76lpcf2NeAsE555JcovTRO+ecO0Ce6J1zLsl5onfOuSTnid4555KcJ3rnnEtynuidcy7JeaJ3zrkk9/9QTOuCUl4+vQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the chart for accuracy and loss on both training and validation\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "acc = history.history['accuracy']\n",
    "val_acc = history.history['val_accuracy']\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "\n",
    "epochs = range(len(acc))\n",
    "\n",
    "plt.plot(epochs, acc, 'r', label='Training accuracy')\n",
    "plt.plot(epochs, val_acc, 'b', label='Validation accuracy')\n",
    "plt.title('Training and validation accuracy')\n",
    "plt.legend()\n",
    "plt.figure()\n",
    "\n",
    "plt.plot(epochs, loss, 'r', label='Training Loss')\n",
    "plt.plot(epochs, val_loss, 'b', label='Validation Loss')\n",
    "plt.title('Training and validation loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Submission Instructions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now click the 'Submit Assignment' button above."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# When you're done or would like to take a break, please run the two cells below to save your work and close the Notebook. This will free up resources for your fellow learners. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "<!-- Save the notebook -->\n",
       "IPython.notebook.save_checkpoint();\n"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%javascript\n",
    "<!-- Save the notebook -->\n",
    "IPython.notebook.save_checkpoint();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%javascript\n",
    "IPython.notebook.session.delete();\n",
    "window.onbeforeunload = null\n",
    "setTimeout(function() { window.close(); }, 1000);"
   ]
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "Exercise 7 - Question.ipynb",
   "provenance": []
  },
  "coursera": {
   "course_slug": "convolutional-neural-networks-tensorflow",
   "graded_item_id": "csg1x",
   "launcher_item_id": "GpKYz"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
